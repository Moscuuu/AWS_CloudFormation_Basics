AWSTemplateFormatVersion: 2010-09-09
Description: Deployment of Elastic Stack
Resources:
  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable TCP access via port 9200
      SecurityGroupIngress:
        - CidrIp:
            !ImportValue network:VPCCIDR
          FromPort: '9200'
          IpProtocol: tcp
          ToPort: '9200'
        - CidrIp: !ImportValue network:VPCCIDR
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
        - CidrIp: !ImportValue network:VPCCIDR
          FromPort: '5601'
          IpProtocol: tcp
          ToPort: '5601'
        - CidrIp: !ImportValue network:VPCCIDR
          FromPort: '5044'
          IpProtocol: tcp
          ToPort: '5044'
      VpcId: !ImportValue network:VPC
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NAT:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !ImportValue network:PublicSubnet1
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !ImportValue network:VPC
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT
  MyFirstPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !ImportValue network:PrivateSubnet2
  ElasticStack:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !ImportValue network:AvailabilityZone2
      ImageId: ami-08b5b3a93ed654d19
      InstanceType: t2.large
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          DeviceIndex: 0
          GroupSet:
            - !Ref PrivateSecurityGroup
          SubnetId: !ImportValue network:PrivateSubnet2
      IamInstanceProfile: LabInstanceProfile
      KeyName: vockey
      Monitoring: true
      UserData:
        Fn::Base64: !Sub
        - |
          #!/bin/bash
          
          EFS="${EFS}"

          echo "EFS: $EFS"

          yum -y install amazon-efs-utils

          mkdir /mnt/efs
          
          sudo mount -t efs -o tls $EFS:/ /mnt/efs

          sudo yum install java-11 -y

          sudo rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch

          cat <<EOF | sudo tee /etc/yum.repos.d/elastic.repo
          [elastic-8.x]
          name=Elastic repository for 8.x packages
          baseurl=https://artifacts.elastic.co/packages/8.x/yum
          gpgcheck=1
          gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch
          enabled=1
          autorefresh=1
          type=rpm-md
          EOF

          sudo yum clean all
          sudo yum makecache

          sudo yum -y install elasticsearch

          sudo sed -i 's/#network.host: 192.168.0.1/network.host: 0.0.0.0/g' /etc/elasticsearch/elasticsearch.yml
          sudo sed -i 's/#discovery.seed_hosts:.*/discovery.seed_hosts: []/g' /etc/elasticsearch/elasticsearch.yml
          sudo sed -i 's/xpack.security.enabled: true/xpack.security.enabled: false/g' /etc/elasticsearch/elasticsearch.yml

          sudo systemctl start elasticsearch.service
          sudo systemctl enable elasticsearch.service
          sudo systemctl status elasticsearch.service

          sudo curl -X GET "localhost:9200"

          sudo yum install logstash -y

          sudo tee /etc/logstash/conf.d/logstash.conf <<EOF
          input {
            beats {
              port => 5044
            }
          }
          output {
            if [@metadata][pipeline] {
            elasticsearch {
              hosts => ["localhost:9200"]
              manage_template => false
              index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
              pipeline => "%{[@metadata][pipeline]}"
            }
            } else {
            elasticsearch {
              hosts => ["localhost:9200"]
              manage_template => false
              index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
            }
            }
          }
          EOF

          sudo systemctl enable logstash
          sudo systemctl start logstash
          sudo systemctl status logstash

          sudo yum install kibana -y

          sudo sed -i 's/#server.port: 5601/server.port: 5601/g' /etc/kibana/kibana.yml
          sudo sed -i 's/#server.host: "localhost"/server.host: "0.0.0.0"/g' /etc/kibana/kibana.yml
          sudo sed -i 's/#elasticsearch.hosts: \["http:\/\/localhost:9200"\]/elasticsearch.hosts: \["http:\/\/localhost:9200"\]/g' /etc/kibana/kibana.yml

          sudo systemctl start kibana
          sudo systemctl enable kibana
          sudo systemctl status kibana

          sudo yum install filebeat -y

          sudo sed -i 's/output.elasticsearch:/#output.elasticsearch:/g' /etc/filebeat/filebeat.yml
          sudo sed -i 's/hosts: \["localhost:9200"\]/#hosts: \["localhost:9200"\]/g' /etc/filebeat/filebeat.yml

          sudo sed -i 's/#output.logstash:/output.logstash:/g' /etc/filebeat/filebeat.yml
          sudo sed -i 's/#hosts: \["localhost:5044"\]/hosts: \["localhost:5044"\]/g' /etc/filebeat/filebeat.yml

          sudo sed -i 's/enabled: false/enabled: true/g' /etc/filebeat/filebeat.yml
          sudo sed -i 's|- /var/log/\*.log|  - /mnt/efs/logs/*/dotnet.log|g' /etc/filebeat/filebeat.yml

          sudo filebeat setup --index-management -E output.logstash.enabled=false -E 'output.elasticsearch.hosts=["0.0.0.0:9200"]'

          sudo filebeat setup -E output.logstash.enabled=false -E output.elasticsearch.hosts=['localhost:9200'] -E setup.kibana.host=localhost:5601

          sudo systemctl start filebeat
          sudo systemctl enable filebeat
          sudo systemctl status filebeat
        - EFS: !ImportValue EFS
Outputs:
  ESPrivateIP:
    Description: Elastic Stack Private IP
    Value: !GetAtt ElasticStack.PrivateIp
    Export:
      Name: ElasticStackPrivateIP